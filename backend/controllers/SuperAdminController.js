const SuperAdmin = require('../models/SuperAdminModel');
const nodemailer = require('nodemailer');
const bcrypt = require('bcrypt');
const cryptoRandomString = require('crypto-random-string');

async function registerSuperAdmin(req, res) {
  try {
    const { email } = req.body;

    // Check if the super admin with the given email already exists
    const existingSuperAdmin = await SuperAdmin.findOne({ email });

    if (existingSuperAdmin) {
      return res.status(400).json({ error: 'Super admin with this email already exists' });
    }

    // Generate an auto-generated password
    const autoGeneratedPassword = generateRandomPassword(12); // Specify the desired length

    // Hash the password before storing it in the database
    const hashedPassword = await bcrypt.hash(autoGeneratedPassword, 10);

    // Create a new super admin instance
    const superAdmin = new SuperAdmin({
      email,
      password: hashedPassword,
    });

    // Save the super admin to the database
    await superAdmin.save();

    // Send the auto-generated password to the super admin's email
    const transporter = nodemailer.createTransport({
      service: 'Gmail', 
      auth: {
        user: 'amirdaniyal47@email.com',
        pass: process.env.EMAILPW,
      },
    });

    const mailOptions = {
      from: 'amirdaniyal47@gmail.com',
      to: email,
      subject: 'Your Auto-Generated Password - Vanguardian',
      text: `Your auto-generated password is: ${autoGeneratedPassword}. You can login with your email`,
    };

    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        console.error(error);
        res.status(500).json({ error: 'An error occurred while sending the password email.' });
      } else {
        res.status(201).json({ message: 'Super admin registered successfully' });
      }
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while registering the super admin.' });
  }
}

// Helper function to generate a random password
function generateRandomPassword(length) {
  return cryptoRandomString({ length, type: 'alphanumeric' });
}

async function sendVerificationCode(email) {
  const verificationCode = crypto.randomBytes(6).toString('hex'); // 6-digit code

  // Store the verification code in the database, associating it with the user's email or ID
  // You may create a separate table to store verification codes with timestamps

  // Send the verification code to the user's email
  const transporter = nodemailer.createTransport({
    service: 'YourEmailService', // e.g., 'Gmail'
    auth: {
      user: 'your@email.com',
      pass: process.env.EMAILPW,
    },
  });

  const mailOptions = {
    from: 'amirdaniyal47@email.com',
    to: email,
    subject: 'Verification Code for Super Admin Login',
    text: `Your verification code is: ${verificationCode}`,
  };

  await transporter.sendMail(mailOptions);

  return verificationCode;
}

async function loginSuperAdmin(req, res) {
  try {
    const { email, verificationCode, password } = req.body;

    // Find the super admin by email
    const superAdmin = await SuperAdmin.findOne({ email });

    if (!superAdmin) {
      return res.status(404).json({ error: 'Super admin not found' });
    }

    // Retrieve the stored verification code from the database
    const storedVerificationCode = superAdmin.verificationCode;

    // Check if the user-entered code matches the stored code
    if (verificationCode !== storedVerificationCode) {
      return res.status(401).json({ error: 'Invalid verification code' });
    }

    // Verify the password
    const passwordMatch = await bcrypt.compare(password, superAdmin.password);

    if (!passwordMatch) {
      return res.status(401).json({ error: 'Incorrect password' });
    }

    // Log in successful
    res.status(200).json({ message: 'Super admin logged in successfully' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while logging in.' });
  }
}

module.exports = {
  loginSuperAdmin,
  registerSuperAdmin,
  sendVerificationCode
};
